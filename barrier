#lang racket

;Testing barrier in racket
;NOTE: A and b don't seem to finish. look into that...

(define n 3)
(define count 0)
(define mutex (make-semaphore 1))
(define barrier (make-semaphore 0))

(define Barrier 
  (lambda() 
    (semaphore-wait mutex)
      (set! count (+ count 1))
    (semaphore-post mutex)
    (cond((= count n) (semaphore-post barrier)))
    (semaphore-wait barrier)))

(define A
   (lambda()
     (print "I am A")
     (Barrier)
     (print "A is free")))

(define B
   (lambda()
     (print "I am B")
     (Barrier)
     (print "B is free")))

(define C
   (lambda()
     (print "I am C")
     (Barrier)
     (print "C is free")))

(thread A)
(thread B)
(thread C)
(print count)

    
    